{"message":"failed to resolve: use of undeclared type or module `futures`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4,"byte_end":11,"line_start":1,"line_end":1,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"use futures::executor::block_on;","highlight_start":5,"highlight_end":12}],"label":"use of undeclared type or module `futures`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type or module `futures`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse futures::executor::block_on;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `futures`\u001b[0m\n\n"}
{"message":"unresolved import `async_std`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":37,"byte_end":46,"line_start":2,"line_end":2,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use async_std::task;","highlight_start":5,"highlight_end":14}],"label":"use of undeclared type or module `async_std`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `async_std`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse async_std::task;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `async_std`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type or module `futures`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":444,"byte_end":451,"line_start":23,"line_end":23,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    futures::join!(two_table, three_table);","highlight_start":5,"highlight_end":12}],"label":"use of undeclared type or module `futures`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type or module `futures`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:23:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    futures::join!(two_table, three_table);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `futures`\u001b[0m\n\n"}
{"message":"cannot find function `block_on` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":503,"byte_end":511,"line_start":27,"line_end":27,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    block_on(compute());","highlight_start":5,"highlight_end":13}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function `block_on` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:27:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    block_on(compute());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"type inside `async fn` body must be known in this context","code":{"code":"E0698","explanation":"When using generators (or async) all type variables must be bound so a\ngenerator can be constructed.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0698\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar().await; // error: cannot infer type for `T`\n}\n```\n\nIn the above example `T` is unknowable by the compiler.\nTo fix this you must bind `T` to a concrete type such as `String`\nso that a generator can then be constructed:\n\n```edition2018\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar::<String>().await;\n    //   ^^^^^^^^ specify type explicitly\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":114,"byte_end":115,"line_start":7,"line_end":7,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"    for i in 1..10 {","highlight_start":14,"highlight_end":15}],"label":"cannot infer type for type `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type is part of the `async fn` body because of this `await`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":167,"byte_end":208,"line_start":9,"line_end":9,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":167,"byte_end":208,"line_start":9,"line_end":9,"column_start":9,"column_end":50,"is_primary":false,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0698]\u001b[0m\u001b[0m\u001b[1m: type inside `async fn` body must be known in this context\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:7:14\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    for i in 1..10 {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type `{integer}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the type is part of the `async fn` body because of this `await`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        task::sleep(Duration::from_secs(1)).await;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"type inside `async fn` body must be known in this context","code":{"code":"E0698","explanation":"When using generators (or async) all type variables must be bound so a\ngenerator can be constructed.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0698\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar().await; // error: cannot infer type for `T`\n}\n```\n\nIn the above example `T` is unknowable by the compiler.\nTo fix this you must bind `T` to a concrete type such as `String`\nso that a generator can then be constructed:\n\n```edition2018\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar::<String>().await;\n    //   ^^^^^^^^ specify type explicitly\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":117,"byte_end":119,"line_start":7,"line_end":7,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"    for i in 1..10 {","highlight_start":17,"highlight_end":19}],"label":"cannot infer type for type `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type is part of the `async fn` body because of this `await`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":167,"byte_end":208,"line_start":9,"line_end":9,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":167,"byte_end":208,"line_start":9,"line_end":9,"column_start":9,"column_end":50,"is_primary":false,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0698]\u001b[0m\u001b[0m\u001b[1m: type inside `async fn` body must be known in this context\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:7:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    for i in 1..10 {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type `{integer}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the type is part of the `async fn` body because of this `await`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        task::sleep(Duration::from_secs(1)).await;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"type inside `async fn` body must be known in this context","code":{"code":"E0698","explanation":"When using generators (or async) all type variables must be bound so a\ngenerator can be constructed.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0698\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar().await; // error: cannot infer type for `T`\n}\n```\n\nIn the above example `T` is unknowable by the compiler.\nTo fix this you must bind `T` to a concrete type such as `String`\nso that a generator can then be constructed:\n\n```edition2018\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar::<String>().await;\n    //   ^^^^^^^^ specify type explicitly\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":114,"byte_end":119,"line_start":7,"line_end":7,"column_start":14,"column_end":19,"is_primary":true,"text":[{"text":"    for i in 1..10 {","highlight_start":14,"highlight_end":19}],"label":"cannot infer type for type `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":114,"byte_end":119,"line_start":7,"line_end":7,"column_start":14,"column_end":19,"is_primary":false,"text":[{"text":"    for i in 1..10 {","highlight_start":14,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the type is part of the `async fn` body because of this `await`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":167,"byte_end":208,"line_start":9,"line_end":9,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":167,"byte_end":208,"line_start":9,"line_end":9,"column_start":9,"column_end":50,"is_primary":false,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0698]\u001b[0m\u001b[0m\u001b[1m: type inside `async fn` body must be known in this context\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:7:14\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    for i in 1..10 {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type `{integer}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the type is part of the `async fn` body because of this `await`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        task::sleep(Duration::from_secs(1)).await;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"type inside `async fn` body must be known in this context","code":{"code":"E0698","explanation":"When using generators (or async) all type variables must be bound so a\ngenerator can be constructed.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0698\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar().await; // error: cannot infer type for `T`\n}\n```\n\nIn the above example `T` is unknowable by the compiler.\nTo fix this you must bind `T` to a concrete type such as `String`\nso that a generator can then be constructed:\n\n```edition2018\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar::<String>().await;\n    //   ^^^^^^^^ specify type explicitly\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":114,"byte_end":119,"line_start":7,"line_end":7,"column_start":14,"column_end":19,"is_primary":true,"text":[{"text":"    for i in 1..10 {","highlight_start":14,"highlight_end":19}],"label":"cannot infer type for type `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":114,"byte_end":119,"line_start":7,"line_end":7,"column_start":14,"column_end":19,"is_primary":false,"text":[{"text":"    for i in 1..10 {","highlight_start":14,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the type is part of the `async fn` body because of this `await`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":167,"byte_end":208,"line_start":9,"line_end":9,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":167,"byte_end":208,"line_start":9,"line_end":9,"column_start":9,"column_end":50,"is_primary":false,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0698]\u001b[0m\u001b[0m\u001b[1m: type inside `async fn` body must be known in this context\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:7:14\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    for i in 1..10 {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type `{integer}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the type is part of the `async fn` body because of this `await`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        task::sleep(Duration::from_secs(1)).await;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"type inside `async fn` body must be known in this context","code":{"code":"E0698","explanation":"When using generators (or async) all type variables must be bound so a\ngenerator can be constructed.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0698\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar().await; // error: cannot infer type for `T`\n}\n```\n\nIn the above example `T` is unknowable by the compiler.\nTo fix this you must bind `T` to a concrete type such as `String`\nso that a generator can then be constructed:\n\n```edition2018\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar::<String>().await;\n    //   ^^^^^^^^ specify type explicitly\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":109,"byte_end":110,"line_start":7,"line_end":7,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    for i in 1..10 {","highlight_start":9,"highlight_end":10}],"label":"cannot infer type for type `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type is part of the `async fn` body because of this `await`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":167,"byte_end":208,"line_start":9,"line_end":9,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":167,"byte_end":208,"line_start":9,"line_end":9,"column_start":9,"column_end":50,"is_primary":false,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0698]\u001b[0m\u001b[0m\u001b[1m: type inside `async fn` body must be known in this context\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:7:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    for i in 1..10 {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type `{integer}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the type is part of the `async fn` body because of this `await`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        task::sleep(Duration::from_secs(1)).await;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"type inside `async fn` body must be known in this context","code":{"code":"E0698","explanation":"When using generators (or async) all type variables must be bound so a\ngenerator can be constructed.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0698\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar().await; // error: cannot infer type for `T`\n}\n```\n\nIn the above example `T` is unknowable by the compiler.\nTo fix this you must bind `T` to a concrete type such as `String`\nso that a generator can then be constructed:\n\n```edition2018\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar::<String>().await;\n    //   ^^^^^^^^ specify type explicitly\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":252,"byte_end":253,"line_start":14,"line_end":14,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"    for i in 1..10 {","highlight_start":14,"highlight_end":15}],"label":"cannot infer type for type `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type is part of the `async fn` body because of this `await`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":305,"byte_end":346,"line_start":16,"line_end":16,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":305,"byte_end":346,"line_start":16,"line_end":16,"column_start":9,"column_end":50,"is_primary":false,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0698]\u001b[0m\u001b[0m\u001b[1m: type inside `async fn` body must be known in this context\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:14:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    for i in 1..10 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type `{integer}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the type is part of the `async fn` body because of this `await`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:16:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        task::sleep(Duration::from_secs(1)).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"type inside `async fn` body must be known in this context","code":{"code":"E0698","explanation":"When using generators (or async) all type variables must be bound so a\ngenerator can be constructed.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0698\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar().await; // error: cannot infer type for `T`\n}\n```\n\nIn the above example `T` is unknowable by the compiler.\nTo fix this you must bind `T` to a concrete type such as `String`\nso that a generator can then be constructed:\n\n```edition2018\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar::<String>().await;\n    //   ^^^^^^^^ specify type explicitly\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":255,"byte_end":257,"line_start":14,"line_end":14,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"    for i in 1..10 {","highlight_start":17,"highlight_end":19}],"label":"cannot infer type for type `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type is part of the `async fn` body because of this `await`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":305,"byte_end":346,"line_start":16,"line_end":16,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":305,"byte_end":346,"line_start":16,"line_end":16,"column_start":9,"column_end":50,"is_primary":false,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0698]\u001b[0m\u001b[0m\u001b[1m: type inside `async fn` body must be known in this context\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:14:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    for i in 1..10 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type `{integer}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the type is part of the `async fn` body because of this `await`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:16:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        task::sleep(Duration::from_secs(1)).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"type inside `async fn` body must be known in this context","code":{"code":"E0698","explanation":"When using generators (or async) all type variables must be bound so a\ngenerator can be constructed.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0698\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar().await; // error: cannot infer type for `T`\n}\n```\n\nIn the above example `T` is unknowable by the compiler.\nTo fix this you must bind `T` to a concrete type such as `String`\nso that a generator can then be constructed:\n\n```edition2018\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar::<String>().await;\n    //   ^^^^^^^^ specify type explicitly\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":252,"byte_end":257,"line_start":14,"line_end":14,"column_start":14,"column_end":19,"is_primary":true,"text":[{"text":"    for i in 1..10 {","highlight_start":14,"highlight_end":19}],"label":"cannot infer type for type `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":252,"byte_end":257,"line_start":14,"line_end":14,"column_start":14,"column_end":19,"is_primary":false,"text":[{"text":"    for i in 1..10 {","highlight_start":14,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the type is part of the `async fn` body because of this `await`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":305,"byte_end":346,"line_start":16,"line_end":16,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":305,"byte_end":346,"line_start":16,"line_end":16,"column_start":9,"column_end":50,"is_primary":false,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0698]\u001b[0m\u001b[0m\u001b[1m: type inside `async fn` body must be known in this context\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:14:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    for i in 1..10 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type `{integer}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the type is part of the `async fn` body because of this `await`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:16:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        task::sleep(Duration::from_secs(1)).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"type inside `async fn` body must be known in this context","code":{"code":"E0698","explanation":"When using generators (or async) all type variables must be bound so a\ngenerator can be constructed.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0698\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar().await; // error: cannot infer type for `T`\n}\n```\n\nIn the above example `T` is unknowable by the compiler.\nTo fix this you must bind `T` to a concrete type such as `String`\nso that a generator can then be constructed:\n\n```edition2018\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar::<String>().await;\n    //   ^^^^^^^^ specify type explicitly\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":252,"byte_end":257,"line_start":14,"line_end":14,"column_start":14,"column_end":19,"is_primary":true,"text":[{"text":"    for i in 1..10 {","highlight_start":14,"highlight_end":19}],"label":"cannot infer type for type `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":252,"byte_end":257,"line_start":14,"line_end":14,"column_start":14,"column_end":19,"is_primary":false,"text":[{"text":"    for i in 1..10 {","highlight_start":14,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the type is part of the `async fn` body because of this `await`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":305,"byte_end":346,"line_start":16,"line_end":16,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":305,"byte_end":346,"line_start":16,"line_end":16,"column_start":9,"column_end":50,"is_primary":false,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0698]\u001b[0m\u001b[0m\u001b[1m: type inside `async fn` body must be known in this context\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:14:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    for i in 1..10 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type `{integer}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the type is part of the `async fn` body because of this `await`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:16:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        task::sleep(Duration::from_secs(1)).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"type inside `async fn` body must be known in this context","code":{"code":"E0698","explanation":"When using generators (or async) all type variables must be bound so a\ngenerator can be constructed.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0698\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar().await; // error: cannot infer type for `T`\n}\n```\n\nIn the above example `T` is unknowable by the compiler.\nTo fix this you must bind `T` to a concrete type such as `String`\nso that a generator can then be constructed:\n\n```edition2018\nasync fn bar<T>() -> () {}\n\nasync fn foo() {\n    bar::<String>().await;\n    //   ^^^^^^^^ specify type explicitly\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":247,"byte_end":248,"line_start":14,"line_end":14,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    for i in 1..10 {","highlight_start":9,"highlight_end":10}],"label":"cannot infer type for type `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type is part of the `async fn` body because of this `await`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":305,"byte_end":346,"line_start":16,"line_end":16,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":305,"byte_end":346,"line_start":16,"line_end":16,"column_start":9,"column_end":50,"is_primary":false,"text":[{"text":"        task::sleep(Duration::from_secs(1)).await;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0698]\u001b[0m\u001b[0m\u001b[1m: type inside `async fn` body must be known in this context\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:14:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    for i in 1..10 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type `{integer}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the type is part of the `async fn` body because of this `await`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:16:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        task::sleep(Duration::from_secs(1)).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 14 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 14 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0425, E0432, E0433, E0698.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0425, E0432, E0433, E0698.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0425`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0425`.\u001b[0m\n"}
